Test for SupplyCount is successful!
Test for whoseTurn is successful!
Test for shuffle is successful!
Test for fullDeckCount is successful!
Adventurer Test Successful!
Test Smithy Successful!
Test Embargo Successful!
Test Outpost Successful!
File 'dominion.c'
Lines executed:37.35% of 565
Branches executed:40.05% of 417
Taken at least once:24.22% of 417
Calls executed:31.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int newAdventurer(struct gameState *state);
        -:    9:int newSmithy(struct gameState *state, int handPos);
        -:   10:int newGreatHall(struct gameState *state, int handPos);
        -:   11:int newEmbargo(struct gameState *state, int handPos, int choice1);
        -:   12:int newOutpost(struct gameState *state, int handPos);
        -:   13:
function compare called 182 returned 100% blocks executed 100%
      182:   14:int compare(const void* a, const void* b) {
      182:   15:  if (*(int*)a > *(int*)b)
branch  0 taken 1 (fallthrough)
branch  1 taken 181
        1:   16:    return 1;
      181:   17:  if (*(int*)a < *(int*)b)
branch  0 taken 49 (fallthrough)
branch  1 taken 132
       49:   18:    return -1;
      132:   19:  return 0;
        -:   20:}
        -:   21:
function newGame called 0 returned 0% blocks executed 0%
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
function initializeGame called 6 returned 100% blocks executed 88%
        6:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;
        -:   49:  //set up random number generator
        6:   50:  SelectStream(1);
call    0 returned 6
        6:   51:  PutSeed((long)randomSeed);
call    0 returned 6
        -:   52:
        -:   53:  //check number of players
        6:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 6
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
        6:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
       66:   63:  for (i = 0; i < 10; i++)
branch  0 taken 60
branch  1 taken 6 (fallthrough)
        -:   64:    {
      660:   65:      for (j = 0; j < 10; j++)
branch  0 taken 600
branch  1 taken 60 (fallthrough)
        -:   66:        {
      600:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 540 (fallthrough)
branch  1 taken 60
branch  2 taken 0 (fallthrough)
branch  3 taken 540
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
        6:   79:  if (numPlayers == 2)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        -:   80:    {
        6:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
    #####:   83:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
        6:   93:  if (numPlayers == 2)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        -:   94:    {
        6:   95:      state->supplyCount[estate] = 8;
        6:   96:      state->supplyCount[duchy] = 8;
        6:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
    #####:  101:      state->supplyCount[estate] = 12;
    #####:  102:      state->supplyCount[duchy] = 12;
    #####:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
        6:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  108:  state->supplyCount[silver] = 40;
        6:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
      126:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 120
branch  1 taken 6 (fallthrough)
        -:  113:    {
      990:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 930
branch  1 taken 60 (fallthrough)
        -:  115:	{
      930:  116:	  if (kingdomCards[j] == i)
branch  0 taken 60 (fallthrough)
branch  1 taken 870
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
       60:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 60 (fallthrough)
branch  1 taken 0
branch  2 taken 6 (fallthrough)
branch  3 taken 54
        -:  120:		{
       12:  121:		  if (numPlayers == 2){
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  122:		    state->supplyCount[i] = 8;
        -:  123:		  }
    #####:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
       54:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
       60:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
      870:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       18:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12
branch  1 taken 6 (fallthrough)
        -:  145:    {
       12:  146:      state->deckCount[i] = 0;
       48:  147:      for (j = 0; j < 3; j++)
branch  0 taken 36
branch  1 taken 12 (fallthrough)
        -:  148:	{
       36:  149:	  state->deck[i][j] = estate;
       36:  150:	  state->deckCount[i]++;
        -:  151:	}
       96:  152:      for (j = 3; j < 10; j++)
branch  0 taken 84
branch  1 taken 12 (fallthrough)
        -:  153:	{
       84:  154:	  state->deck[i][j] = copper;
       84:  155:	  state->deckCount[i]++;
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
       18:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12
branch  1 taken 6 (fallthrough)
        -:  161:    {
       12:  162:      if ( shuffle(i, state) < 0 )
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
       18:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12
branch  1 taken 6 (fallthrough)
        -:  170:    {
        -:  171:      //initialize hand size to zero
       12:  172:      state->handCount[i] = 0;
       12:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      168:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 162
branch  1 taken 6 (fallthrough)
        -:  183:    {
      162:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
        6:  188:  state->outpostPlayed = 0;
        6:  189:  state->phase = 0;
        6:  190:  state->numActions = 1;
        6:  191:  state->numBuys = 1;
        6:  192:  state->playedCardCount = 0;
        6:  193:  state->whoseTurn = 0;
        6:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       36:  198:  for (it = 0; it < 5; it++){
branch  0 taken 30
branch  1 taken 6 (fallthrough)
       30:  199:    drawCard(state->whoseTurn, state);
call    0 returned 30
        -:  200:  }
        -:  201:
        6:  202:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 6
        -:  203:
        6:  204:  return 0;
        -:  205:}
        -:  206:
function shuffle called 13 returned 100% blocks executed 94%
       13:  207:int shuffle(int player, struct gameState *state) {
        -:  208:
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
       13:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
       13:  215:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    #####:  216:    return -1;
       13:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 13
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
      149:  220:  while (state->deckCount[player] > 0) {
branch  0 taken 123
branch  1 taken 13 (fallthrough)
      123:  221:    card = floor(Random() * state->deckCount[player]);
call    0 returned 123
      123:  222:    newDeck[newDeckPos] = state->deck[player][card];
      123:  223:    newDeckPos++;
      468:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 345
branch  1 taken 123 (fallthrough)
      345:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
      123:  227:    state->deckCount[player]--;
        -:  228:  }
      136:  229:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 123
branch  1 taken 13 (fallthrough)
      123:  230:    state->deck[player][i] = newDeck[i];
      123:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
       13:  234:  return 0;
        -:  235:}
        -:  236:
function playCard called 0 returned 0% blocks executed 0%
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  238:{
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
call    0 never executed
        -:  256:
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  274:
    #####:  275:  return 0;
        -:  276:}
        -:  277:
function buyCard called 8 returned 100% blocks executed 100%
        8:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
        8:  286:  who = state->whoseTurn;
        -:  287:
        8:  288:  if (state->numBuys < 1){
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
        1:  291:    return -1;
        7:  292:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 7
branch  1 taken 2 (fallthrough)
branch  2 taken 5
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
        2:  295:    return -1;
        5:  296:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 5
branch  1 taken 4 (fallthrough)
branch  2 taken 1
        -:  297:    if (DEBUG)
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        4:  299:    return -1;
        -:  300:  } else {
        1:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
        1:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 1
        -:  304:
        1:  305:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 1
        1:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:
        1:  314:  return 0;
        -:  315:}
        -:  316:
function numHandCards called 24 returned 100% blocks executed 100%
       24:  317:int numHandCards(struct gameState *state) {
       24:  318:  return state->handCount[ whoseTurn(state) ];
call    0 returned 24
        -:  319:}
        -:  320:
function handCard called 20 returned 100% blocks executed 100%
       20:  321:int handCard(int handPos, struct gameState *state) {
       20:  322:  int currentPlayer = whoseTurn(state);
call    0 returned 20
       20:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
function supplyCount called 9 returned 100% blocks executed 100%
        9:  326:int supplyCount(int card, struct gameState *state) {
        9:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
function fullDeckCount called 1 returned 100% blocks executed 82%
        1:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
        1:  332:  int count = 0;
        -:  333:
        6:  334:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -:  335:    {
        5:  336:      if (state->deck[player][i] == card) count++;
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        -:  337:    }
        -:  338:
        6:  339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -:  340:    {
        5:  341:      if (state->hand[player][i] == card) count++;
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        -:  342:    }
        -:  343:
        1:  344:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 1 (fallthrough)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  347:    }
        -:  348:
        1:  349:  return count;
        -:  350:}
        -:  351:
function whoseTurn called 57 returned 100% blocks executed 100%
       57:  352:int whoseTurn(struct gameState *state) {
       57:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
function endTurn called 4 returned 100% blocks executed 93%
        4:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
        4:  359:  int currentPlayer = whoseTurn(state);
call    0 returned 4
        -:  360:
        -:  361:  //Discard hand
       24:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 20
branch  1 taken 4 (fallthrough)
       20:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       20:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
        4:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:
        -:  368:  //Code for determining the player
        4:  369:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
        4:  376:  state->outpostPlayed = 0;
        4:  377:  state->phase = 0;
        4:  378:  state->numActions = 1;
        4:  379:  state->coins = 0;
        4:  380:  state->numBuys = 1;
        4:  381:  state->playedCardCount = 0;
        4:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
       24:  386:  for (k = 0; k < 5; k++){
branch  0 taken 20
branch  1 taken 4 (fallthrough)
       20:  387:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 20
        -:  388:  }
        -:  389:
        -:  390:  //Update money
        4:  391:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 4
        -:  392:
        4:  393:  return 0;
        -:  394:}
        -:  395:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
function drawCard called 60 returned 100% blocks executed 38%
       60:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
       60:  534:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 60
        -:  535:
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
    #####:  539:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  540:      state->deck[player][i] = state->discard[player][i];
    #####:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
    #####:  544:    state->deckCount[player] = state->discardCount[player];
    #####:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
    #####:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  549:
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:
    #####:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
    #####:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:
    #####:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  566:      return -1;
        -:  567:
    #####:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:    state->deckCount[player]--;
    #####:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
       60:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
       60:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
       60:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       60:  582:    state->deckCount[player]--;
       60:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
       60:  586:  return 0;
        -:  587:}
        -:  588:
function getCost called 6 returned 100% blocks executed 17%
        6:  589:int getCost(int cardNumber)
        -:  590:{
        6:  591:  switch( cardNumber )
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 2
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 2
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 2
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
        2:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
        2:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo:
        2:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:
    #####:  649:  return -1;
        -:  650:}
        -:  651:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
        4:  659:  int currentPlayer = whoseTurn(state);
call    0 returned 4
        4:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
        4:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
        4:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
        4:  666:  int z = 0;// this is the counter for the temp hand
        4:  667:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:
        -:  671:
        -:  672:  //uses switch to select card and perform actions
        4:  673:  switch( card )
branch  0 taken 1
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 1
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 1
branch 16 taken 1
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  674:    {
        -:  675:    case adventurer:
        1:  676:      return newAdventurer(state);
call    0 returned 1
        -:  677:
        -:  678:    case council_room:
        -:  679:      //+4 Cards
    #####:  680:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  681:	{
    #####:  682:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  683:	}
        -:  684:
        -:  685:      //+1 Buy
    #####:  686:      state->numBuys++;
        -:  687:
        -:  688:      //Each other player draws a card
    #####:  689:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  690:	{
    #####:  691:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  692:	    {
    #####:  693:	      drawCard(i, state);
call    0 never executed
        -:  694:	    }
        -:  695:	}
        -:  696:
        -:  697:      //put played card in played card pile
    #####:  698:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  699:
    #####:  700:      return 0;
        -:  701:
        -:  702:    case feast:
        -:  703:      //gain card with cost up to 5
        -:  704:      //Backup hand
    #####:  705:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  706:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  707:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  708:      }
        -:  709:      //Backup hand
        -:  710:
        -:  711:      //Update Coins for Buy
    #####:  712:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  713:      x = 1;//Condition to loop on
    #####:  714:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  715:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  716:	  if (DEBUG)
        -:  717:	    printf("None of that card left, sorry!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  721:	  }
        -:  722:	}
    #####:  723:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  724:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  728:	  }
        -:  729:	}
        -:  730:	else{
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
    #####:  736:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  737:	  x = 0;//No more buying cards
        -:  738:
        -:  739:	  if (DEBUG){
        -:  740:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  741:	  }
        -:  742:
        -:  743:	}
        -:  744:      }
        -:  745:
        -:  746:      //Reset Hand
    #####:  747:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  748:	state->hand[currentPlayer][i] = temphand[i];
    #####:  749:	temphand[i] = -1;
        -:  750:      }
        -:  751:      //Reset Hand
        -:  752:
    #####:  753:      return 0;
        -:  754:
        -:  755:    case gardens:
    #####:  756:      return -1;
        -:  757:
        -:  758:    case mine:
    #####:  759:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  760:
    #####:  761:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  777:
        -:  778:      //discard card from hand
    #####:  779:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  780:
        -:  781:      //discard trashed card
    #####:  782:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  783:	{
    #####:  784:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  785:	    {
    #####:  786:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  787:	      break;
        -:  788:	    }
        -:  789:	}
        -:  790:
    #####:  791:      return 0;
        -:  792:
        -:  793:    case remodel:
    #####:  794:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  795:
    #####:  796:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  797:	{
    #####:  798:	  return -1;
        -:  799:	}
        -:  800:
    #####:  801:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  802:
        -:  803:      //discard card from hand
    #####:  804:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  805:
        -:  806:      //discard trashed card
    #####:  807:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  810:	    {
    #####:  811:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  812:	      break;
        -:  813:	    }
        -:  814:	}
        -:  815:
        -:  816:
    #####:  817:      return 0;
        -:  818:
        -:  819:    case smithy:
        1:  820:      return newSmithy(state, handPos);
call    0 returned 1
        -:  821:
        -:  822:    case village:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
call    0 never executed
        -:  825:
        -:  826:      //+2 Actions
    #####:  827:      state->numActions = state->numActions + 2;
        -:  828:
        -:  829:      //discard played card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  831:      return 0;
        -:  832:
        -:  833:    case baron:
    #####:  834:      state->numBuys++;//Increase buys by 1!
    #####:  835:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  836:	int p = 0;//Iterator for hand!
    #####:  837:	int card_not_discarded = 1;//Flag for discard set!
    #####:  838:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  839:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  840:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  841:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  842:	    state->discardCount[currentPlayer]++;
    #####:  843:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  844:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  845:	    }
    #####:  846:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  847:	    state->handCount[currentPlayer]--;
    #####:  848:	    card_not_discarded = 0;//Exit the loop
        -:  849:	  }
    #####:  850:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  851:	    if(DEBUG) {
        -:  852:	      printf("No estate cards in your hand, invalid choice\n");
        -:  853:	      printf("Must gain an estate if there are any\n");
        -:  854:	    }
    #####:  855:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  856:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  857:	      state->supplyCount[estate]--;//Decrement estates
    #####:  858:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  859:		isGameOver(state);
call    0 never executed
        -:  860:	      }
        -:  861:	    }
    #####:  862:	    card_not_discarded = 0;//Exit the loop
        -:  863:	  }
        -:  864:
        -:  865:	  else{
    #####:  866:	    p++;//Next card
        -:  867:	  }
        -:  868:	}
        -:  869:      }
        -:  870:
        -:  871:      else{
    #####:  872:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  873:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  874:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  875:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:	    isGameOver(state);
call    0 never executed
        -:  877:	  }
        -:  878:	}
        -:  879:      }
        -:  880:
        -:  881:
    #####:  882:      return 0;
        -:  883:
        -:  884:    case great_hall:
    #####:  885:      return newGreatHall(state, handPos);
call    0 never executed
        -:  886:
        -:  887:    case minion:
        -:  888:      //+1 action
    #####:  889:      state->numActions++;
        -:  890:
        -:  891:      //discard card from hand
    #####:  892:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  893:
    #####:  894:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  895:	{
    #####:  896:	  state->coins = state->coins + 2;
        -:  897:	}
        -:  898:
    #####:  899:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  900:	{
        -:  901:	  //discard hand
    #####:  902:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  903:	    {
    #####:  904:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  905:	    }
        -:  906:
        -:  907:	  //draw 4
    #####:  908:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  911:	    }
        -:  912:
        -:  913:	  //other players discard hand and redraw if hand size > 4
    #####:  914:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  917:		{
    #####:  918:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  919:		    {
        -:  920:		      //discard hand
    #####:  921:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  922:			{
    #####:  923:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  924:			}
        -:  925:
        -:  926:		      //draw 4
    #####:  927:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  928:			{
    #####:  929:			  drawCard(i, state);
call    0 never executed
        -:  930:			}
        -:  931:		    }
        -:  932:		}
        -:  933:	    }
        -:  934:
        -:  935:	}
    #####:  936:      return 0;
        -:  937:
        -:  938:    case steward:
    #####:  939:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  940:	{
        -:  941:	  //+2 cards
    #####:  942:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  943:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  944:	}
    #####:  945:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  946:	{
        -:  947:	  //+2 coins
    #####:  948:	  state->coins = state->coins + 2;
        -:  949:	}
        -:  950:      else
        -:  951:	{
        -:  952:	  //trash 2 cards in hand
    #####:  953:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  954:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  955:	}
        -:  956:
        -:  957:      //discard card from hand
    #####:  958:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  959:      return 0;
        -:  960:
        -:  961:    case tribute:
    #####:  962:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  963:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  964:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:	  state->deckCount[nextPlayer]--;
        -:  966:	}
    #####:  967:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  968:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  969:	  state->discardCount[nextPlayer]--;
        -:  970:	}
        -:  971:	else{
        -:  972:	  //No Card to Reveal
        -:  973:	  if (DEBUG){
        -:  974:	    printf("No cards to reveal\n");
        -:  975:	  }
        -:  976:	}
        -:  977:      }
        -:  978:
        -:  979:      else{
    #####:  980:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  981:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  982:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  983:	    state->deckCount[nextPlayer]++;
    #####:  984:	    state->discard[nextPlayer][i] = -1;
    #####:  985:	    state->discardCount[nextPlayer]--;
        -:  986:	  }
        -:  987:
    #####:  988:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  989:	}
    #####:  990:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  991:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  992:	state->deckCount[nextPlayer]--;
    #####:  993:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  994:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  995:	state->deckCount[nextPlayer]--;
        -:  996:      }
        -:  997:
    #####:  998:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  999:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1000:	state->playedCardCount++;
    #####: 1001:	tributeRevealedCards[1] = -1;
        -: 1002:      }
        -: 1003:
    #####: 1004:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1005:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1006:	  state->coins += 2;
        -: 1007:	}
        -: 1008:
    #####: 1009:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1010:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1011:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1012:	}
        -: 1013:	else{//Action Card
    #####: 1014:	  state->numActions = state->numActions + 2;
        -: 1015:	}
        -: 1016:      }
        -: 1017:
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case ambassador:
    #####: 1021:      j = 0;		//used to check if player has enough cards to discard
        -: 1022:
    #####: 1023:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1024:	{
    #####: 1025:	  return -1;
        -: 1026:	}
        -: 1027:
    #####: 1028:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1029:	{
    #####: 1030:	  return -1;
        -: 1031:	}
        -: 1032:
    #####: 1033:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
    #####: 1035:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1036:	    {
    #####: 1037:	      j++;
        -: 1038:	    }
        -: 1039:	}
    #####: 1040:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  return -1;
        -: 1043:	}
        -: 1044:
        -: 1045:      if (DEBUG)
        -: 1046:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1047:
        -: 1048:      //increase supply count for choosen card by amount being discarded
    #####: 1049:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1050:
        -: 1051:      //each other player gains a copy of revealed card
    #####: 1052:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1053:	{
    #####: 1054:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1055:	    {
    #####: 1056:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1057:	    }
        -: 1058:	}
        -: 1059:
        -: 1060:      //discard played card from hand
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1062:
        -: 1063:      //trash copies of cards returned to supply
    #####: 1064:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:	{
    #####: 1066:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1067:	    {
    #####: 1068:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1069:		{
    #####: 1070:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1071:		  break;
        -: 1072:		}
        -: 1073:	    }
        -: 1074:	}
        -: 1075:
    #####: 1076:      return 0;
        -: 1077:
        -: 1078:    case cutpurse:
        -: 1079:
    #####: 1080:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1081:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1084:	    {
    #####: 1085:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1086:		{
    #####: 1087:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1088:		    {
    #####: 1089:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1090:		      break;
        -: 1091:		    }
    #####: 1092:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1093:		    {
    #####: 1094:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1095:			{
        -: 1096:			  if (DEBUG)
        -: 1097:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1098:			}
    #####: 1099:		      break;
        -: 1100:		    }
        -: 1101:		}
        -: 1102:
        -: 1103:	    }
        -: 1104:
        -: 1105:	}
        -: 1106:
        -: 1107:      //discard played card from hand
    #####: 1108:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1109:
    #####: 1110:      return 0;
        -: 1111:
        -: 1112:
        -: 1113:    case embargo:
        1: 1114:      return newEmbargo(state, handPos, choice1);
call    0 returned 1
        -: 1115:
        -: 1116:    case outpost:
        1: 1117:      return newOutpost(state, handPos);
call    0 returned 1
        -: 1118:
        -: 1119:    case salvager:
        -: 1120:      //+1 buy
    #####: 1121:      state->numBuys++;
        -: 1122:
    #####: 1123:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1124:	{
        -: 1125:	  //gain coins equal to trashed card
    #####: 1126:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1127:	  //trash card
    #####: 1128:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1129:	}
        -: 1130:
        -: 1131:      //discard card
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1133:      return 0;
        -: 1134:
        -: 1135:    case sea_hag:
    #####: 1136:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1137:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1138:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1139:	  state->discardCount[i]++;
    #####: 1140:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1141:	}
        -: 1142:      }
    #####: 1143:      return 0;
        -: 1144:
        -: 1145:    case treasure_map:
        -: 1146:      //search hand for another treasure_map
    #####: 1147:      index = -1;
    #####: 1148:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1151:	    {
    #####: 1152:	      index = i;
    #####: 1153:	      break;
        -: 1154:	    }
        -: 1155:	}
    #####: 1156:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1157:	{
        -: 1158:	  //trash both treasure cards
    #####: 1159:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1160:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1161:
        -: 1162:	  //gain 4 Gold cards
    #####: 1163:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1164:	    {
    #####: 1165:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1166:	    }
        -: 1167:
        -: 1168:	  //return success
    #####: 1169:	  return 1;
        -: 1170:	}
        -: 1171:
        -: 1172:      //no second treasure_map found in hand
    #####: 1173:      return -1;
        -: 1174:    }
        -: 1175:
    #####: 1176:  return -1;
        -: 1177:}
        -: 1178:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1179:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1180:{
        -: 1181:
        -: 1182:  //if card is not trashed, added to Played pile
        3: 1183:  if (trashFlag < 1)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -: 1184:    {
        -: 1185:      //add card to played pile
        2: 1186:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1187:      state->playedCardCount++;
        -: 1188:    }
        -: 1189:
        -: 1190:  //set played card to -1
        3: 1191:  state->hand[currentPlayer][handPos] = -1;
        -: 1192:
        -: 1193:  //remove card from player's hand
        3: 1194:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 1195:    {
        -: 1196:      //reduce number of cards in hand
    #####: 1197:      state->handCount[currentPlayer]--;
        -: 1198:    }
        3: 1199:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 1200:    {
        -: 1201:      //reduce number of cards in hand
    #####: 1202:      state->handCount[currentPlayer]--;
        -: 1203:    }
        -: 1204:  else
        -: 1205:    {
        -: 1206:      //replace discarded card with last card in hand
        3: 1207:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1208:      //set last card to -1
        3: 1209:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1210:      //reduce number of cards in hand
        3: 1211:      state->handCount[currentPlayer]--;
        -: 1212:    }
        -: 1213:
        3: 1214:  return 0;
        -: 1215:}
        -: 1216:
function gainCard called 1 returned 100% blocks executed 70%
        1: 1217:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1218:{
        -: 1219:  //Note: supplyPos is enum of choosen card
        -: 1220:
        -: 1221:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1222:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 1223:    {
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:
        -: 1227:  //added card for [whoseTurn] current player:
        -: 1228:  // toFlag = 0 : add to discard
        -: 1229:  // toFlag = 1 : add to deck
        -: 1230:  // toFlag = 2 : add to hand
        -: 1231:
        1: 1232:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1233:    {
    #####: 1234:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1235:      state->deckCount[player]++;
        -: 1236:    }
        1: 1237:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1238:    {
    #####: 1239:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1240:      state->handCount[player]++;
        -: 1241:    }
        -: 1242:  else
        -: 1243:    {
        1: 1244:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1245:      state->discardCount[player]++;
        -: 1246:    }
        -: 1247:
        -: 1248:  //decrease number in supply pile
        1: 1249:  state->supplyCount[supplyPos]--;
        -: 1250:
        1: 1251:  return 0;
        -: 1252:}
        -: 1253:
function updateCoins called 10 returned 100% blocks executed 82%
       10: 1254:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1255:{
        -: 1256:  int i;
        -: 1257:
        -: 1258:  //reset coin count
       10: 1259:  state->coins = 0;
        -: 1260:
        -: 1261:  //add coins for each Treasure card in player's hand
       60: 1262:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 50
branch  1 taken 10 (fallthrough)
        -: 1263:    {
       50: 1264:      if (state->hand[player][i] == copper)
branch  0 taken 34 (fallthrough)
branch  1 taken 16
        -: 1265:	{
       34: 1266:	  state->coins += 1;
        -: 1267:	}
       16: 1268:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 16
        -: 1269:	{
    #####: 1270:	  state->coins += 2;
        -: 1271:	}
       16: 1272:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 16
        -: 1273:	{
    #####: 1274:	  state->coins += 3;
        -: 1275:	}
        -: 1276:    }
        -: 1277:
        -: 1278:  //add bonus
       10: 1279:  state->coins += bonus;
        -: 1280:
       10: 1281:  return 0;
        -: 1282:}
        -: 1283:
function newAdventurer called 1 returned 100% blocks executed 94%
        1: 1284:int newAdventurer(struct gameState *state) {
        1: 1285:  int drawntreasure = 0;
        1: 1286:  int currentPlayer = whoseTurn(state);
call    0 returned 1
        -: 1287:  int temphand[MAX_HAND];
        -: 1288:  int cardDrawn;
        1: 1289:  int z = 0;
        -: 1290:
        -: 1291:  // should draw two treasures, instead it draws until 3 treasures have been drawn
        7: 1292:  while (drawntreasure < 3) {
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5: 1293:    if (state->deckCount[currentPlayer] < 1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 1294:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1295:    }
        -: 1296:
        5: 1297:    drawCard(currentPlayer, state);
call    0 returned 5
        5: 1298:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        5: 1299:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 2 (fallthrough)
branch  1 taken 3
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        3: 1300:      drawntreasure++;
        -: 1301:    } else {
        2: 1302:      temphand[z] = cardDrawn;
        2: 1303:      state->handCount[currentPlayer]--;
        2: 1304:      z++;
        -: 1305:    }
        -: 1306:
       12: 1307:    while (z - 1 >= 0) {
branch  0 taken 2
branch  1 taken 5 (fallthrough)
        2: 1308:      state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
        2: 1309:      z = z - 1;
        -: 1310:    }
        -: 1311:  }
        -: 1312:
        1: 1313:  return 0;
        -: 1314:}
        -: 1315:
function newSmithy called 1 returned 100% blocks executed 100%
        1: 1316:int newSmithy(struct gameState *state, int handPos) {
        1: 1317:  int currentPlayer = whoseTurn(state);
call    0 returned 1
        -: 1318:  int i;
        -: 1319:
        -: 1320:  // should draw 3 cards, but I have set it to draw 5
        6: 1321:  for (i = 0; i < 5; i++) {
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5: 1322:    drawCard(currentPlayer, state);
call    0 returned 5
        -: 1323:  }
        -: 1324:
        1: 1325:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1: 1326:  return 0;
        -: 1327:}
        -: 1328:
function newGreatHall called 0 returned 0% blocks executed 0%
    #####: 1329:int newGreatHall(struct gameState *state, int handPos) {
    #####: 1330:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1331:
    #####: 1332:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1333:
        -: 1334:  // number of actions should only increment to 1, currently increments 5 times
    #####: 1335:  state->numActions = state->numActions + 5;
    #####: 1336:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1337:  return 0;
        -: 1338:}
        -: 1339:
function newEmbargo called 1 returned 100% blocks executed 83%
        1: 1340:int newEmbargo(struct gameState *state, int handPos, int choice1) {
        1: 1341:  int currentPlayer = whoseTurn(state);
call    0 returned 1
        -: 1342:
        -: 1343:  // should only add two coins, this bug instead subracts 1 coin
        1: 1344:  state->coins = state->coins - 1;
        1: 1345:  if (state->supplyCount[choice1] == -1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1346:    return -1;
        -: 1347:  }
        -: 1348:
        1: 1349:  state->embargoTokens[choice1]++;
        1: 1350:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 1
        1: 1351:  return 0;
        -: 1352:}
        -: 1353:
function newOutpost called 1 returned 100% blocks executed 100%
        1: 1354:int newOutpost(struct gameState *state, int handPos) {
        1: 1355:  int currentPlayer = whoseTurn(state);
call    0 returned 1
        -: 1356:
        1: 1357:  state->outpostPlayed++;
        1: 1358:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1: 1359:  return 0;
        -: 1360:}
        -: 1361:
        -: 1362://end of dominion.c
